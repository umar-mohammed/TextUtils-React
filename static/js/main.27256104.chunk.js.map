{"version":3,"sources":["components/Alert.js","components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","React","createElement","style","height","alert","align","className","role","aria-live","aria-atomic","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","type","msg","Navbar","concat","mode","href","title","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","toggleMode","cursor","htmlFor","TextForm","_useState","useState","_useState2","_slicedToArray","text","setText","wordLength","split","filter","element","length","isbuttonDisbale","Fragment","color","heading","value","onChange","event","target","backgroundColor","rows","disabled","showAlert","t","replace","match","group","newText","join","navigator","clipboard","writeText","defaultProps","about","App","setMode","_useState3","_useState4","setAlert","message","setTimeout","document","body","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.27256104.chunk.js","sourcesContent":["import React from 'react'\n\nfunction Alert(props) {\n    const capitalize = (word) => {\n        const lower = word.toLowerCase();\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\n    }\n    return (\n        <div style={{ height: \"50px\" }}>\n            {props.alert && <div align=\"right\">\n                <div className=\"toast align-items-center text-success-emphasis bg-success border-0 show\" role=\"alert\" aria-live=\"assertive\" aria-atomic=\"true\">\n                    <div className=\"d-flex\">\n                        <div className=\"toast-body\">\n                            <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\n                        </div>\n                    </div>\n                </div>\n            </div>}\n        </div>\n    )\n}\n\nexport default Alert\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n// import { Link } from \"react-router-dom\";\n\nexport default function Navbar(props) {\n    return (\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\n            <div className=\"container-fluid\">\n                <a className=\"navbar-brand\" href=\"#\">\n                    {props.title}\n                </a>\n                <button\n                    className=\"navbar-toggler\"\n                    type=\"button\"\n                    data-bs-toggle=\"collapse\"\n                    data-bs-target=\"#navbarSupportedContent\"\n                    aria-controls=\"navbarSupportedContent\"\n                    aria-expanded=\"false\"\n                    aria-label=\"Toggle navigation\"\n                >\n                    <span className=\"navbar-toggler-icon\"></span>\n                </button>\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n                        <li className=\"nav-item\">\n                            <a className=\"nav-link\" aria-current=\"page\" href=\"#\">\n                                Home\n                            </a>\n                        </li>\n                        {/* <li className=\"nav-item\">\n                            <a className=\"nav-link\" href=\"/about\">\n                                {props.about}\n                            </a>\n                        </li> */}\n                    </ul>\n                    {/* <form className=\"d-flex\" role=\"search\">\n                        <input\n                            className=\"form-control me-2\"\n                            type=\"search\"\n                            placeholder=\"Search\"\n                            aria-label=\"Search\"\n                        />\n                        <button className=\"btn btn-outline-primary\" type=\"submit\">\n                            Search\n                        </button>\n                    </form> */}\n                    <div className={`form-check form-switch text-${props.mode === 'light' ? 'dark' : 'light'}`}>\n                        <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\" style={{cursor:\"pointer\"}}/>\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Dark Mode</label>\n                    </div>\n                </div>\n            </div>\n        </nav>\n    );\n}\n\nNavbar.propTypes = {\n    title: PropTypes.string.isRequired,\n    about: PropTypes.string,\n};\n\nNavbar.defaultProps = { title: \"Set Title\", about: \"Set About\" }\n","import React, { useState } from 'react'\n\nexport default function TextForm(props) {\n    const handleOnChange = (event) => {\n        // console.log(\"on Change\")\n        setText(event.target.value)\n    }\n\n    const uppercaseClick = () => {\n        setText(text.toUpperCase())\n        props.showAlert(\"Converted to upper case!\", \"success\")\n    }\n\n    const lowercaseClick = () => {\n        setText(text.toLowerCase())\n        props.showAlert(\"Converted to lower case!\", \"success\")\n    }\n\n    const camelcaseClick = () => {\n        // console.log(\"camelcaseClick \" + text);\n        let t = text.replace(/\\s+(.)/g, function (match, group) {\n            return group.toUpperCase()\n        });\n        // console.log(\"converted camelcaseClick \" + t);\n        setText(t)\n        props.showAlert(\"Converted to camel case!\", \"success\")\n    }\n\n    const clearTextClick = () => {\n        setText(\"\")\n        props.showAlert(\"Cleared text!\", \"success\")\n    }\n\n    const copyTextClick = () => {\n        navigator.clipboard.writeText(text);\n        props.showAlert(\"Copied Text!\", \"success\")\n    }\n\n    const removeExtraSpacesClick = () => {\n        let newText = text.split(/[ ]+/);\n        setText(newText.join(\" \"))\n        props.showAlert(\"Removed extra spaces from text!\", \"success\")\n    }\n\n    const [text, setText] = useState('');\n    let wordLength = text.split(/\\s+/).filter((element) =>{return element.length !== 0}).length;\n    let isbuttonDisbale = (wordLength===0);\n    return (\n        <>\n            <div className=\"container\" style={{ color: props.mode === 'dark' ? 'white' : 'black' }}>\n                <h1>{props.heading}</h1>\n                <div className=\"mb-3\">\n                    {/* <textarea className=\"form-control\" value={text} onChange={handleOnChange} onClick={clearTextClick} id=\"myBox\" rows=\"10\"></textarea> */}\n                    <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{ backgroundColor: props.mode === 'dark' ? 'grey' : 'white', color: props.mode === 'dark' ? 'white' : 'black' }} id=\"myBox\" rows=\"10\"></textarea>\n                </div>\n                <button disabled={isbuttonDisbale} className='btn btn-primary mx-1 my-1' onClick={uppercaseClick}>Convert to Uppercase</button>\n                <button disabled={isbuttonDisbale} className='btn btn-primary mx-1 my-1' onClick={lowercaseClick}>Convert to Lowercase</button>\n                <button disabled={isbuttonDisbale} className='btn btn-primary mx-1 my-1' onClick={camelcaseClick}>Convert to Camelcase</button>\n                <button disabled={isbuttonDisbale} className='btn btn-primary mx-1 my-1' onClick={removeExtraSpacesClick}>Remove Extra Spaces</button>\n                <button disabled={isbuttonDisbale} className='btn btn-primary mx-1 my-1' onClick={copyTextClick}>Copy Text</button>\n                <button disabled={isbuttonDisbale} className='btn btn-danger mx-1 my-1' onClick={clearTextClick}>Clear Text</button>\n\n            </div>\n            <div className=\"container my-3\" style={{ color: props.mode === 'dark' ? 'white' : 'black' }}>\n                <h2>Your text summery:</h2>\n                 \n                <p>{wordLength} words and {text.length} characters</p>\n                <p>{0.008 * wordLength} Minutes to read</p>\n                <h2>Preview:</h2>\n                <p>{text.length > 0 ? text : \"Nothing to preview\"}</p>\n            </div>\n        </>\n    )\n}\n","import \"./App.css\";\n// import About from \"./components/About\";\nimport Alert from \"./components/Alert\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\nimport React, { useState } from 'react'\n// import {\n//   BrowserRouter as Router,\n//   Routes,\n//   Route\n// } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState('light');\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 1000);\n  }\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setMode('dark');\n      document.body.style.backgroundColor = '#343a40';\n      showAlert(\"Dark mode enabled!\", \"success\");\n      document.title = \"Text Utils - Dark Mode\";\n      // setInterval(() => {\n      //   document.title =\"Text Utils - Dark Mode\";\n      // }, 1000);\n      // setInterval(() => {\n      //   document.title =\"Text Utils - Trending Mode\";\n      // }, 1500);\n    } else {\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light mode enabled!\", \"success\");\n      document.title = \"Text Utils - Light Mode\";\n    }\n  }\n  return (\n    <>\n      {/* <Router> */}\n        <Navbar mode={mode} toggleMode={toggleMode} title=\"Text Utils\" about=\"About Us\" />\n        <Alert alert={alert} />\n        <div className=\"container my-3\">\n          {/* <Routes>\n            <Route exact path=\"/about\" element={<About mode={mode} />}> </Route>\n            <Route exact path=\"/\" element={<TextForm mode={mode} showAlert={showAlert} heading=\"Enter the text to Analyze below\" />}></Route>\n          </Routes> */}\n          <TextForm mode={mode} showAlert={showAlert} heading=\"Enter the text to Analyze below\" />\n        </div>\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}